name: Generate and Replace with Documentation
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: 1. Unpack source archives into temporary folders
        run: |
          mkdir -p temp_opencode temp_claude
          
          echo "Unpacking opencode-main.zip..."
          unzip -o opencode-main.zip -d temp_opencode
          rsync -a temp_opencode/opencode-main/ temp_opencode/
          rm -rf temp_opencode/opencode-main
          
          echo "Unpacking claude-code-router-main.zip..."
          unzip -o claude-code-router-main.zip -d temp_claude
          rsync -a temp_claude/claude-code-router-main/ temp_claude/
          rm -rf temp_claude/claude-code-router-main

      - name: 2. Install tree utility
        run: sudo apt-get update && sudo apt-get install -y tree

      - name: 3. Generate Documentation for OpenCode
        run: |
          cd temp_opencode
          OUTPUT_FILE="../opencode_documentation.md"
          
          echo "# Project Documentation: OpenCode" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE

          if [ -f "README.md" ]; then
            echo "## 1. README" >> $OUTPUT_FILE && cat README.md >> $OUTPUT_FILE
          fi
          if [ -f "Design.md" ]; then
            echo "## 2. Design Document" >> $OUTPUT_FILE && cat Design.md >> $OUTPUT_FILE
          fi

          echo "## 3. Project File Tree" >> $OUTPUT_FILE
          echo '```' >> $OUTPUT_FILE
          tree -I ".git|.github|.agent.md|plan.txt|Progress.txt" >> $OUTPUT_FILE
          echo '```' >> $OUTPUT_FILE
          
          echo "## 4. Source Files" >> $OUTPUT_FILE
          current_dir=""
          find . -type d -name ".git" -prune -o -type d -name ".github" -prune -o -print | sort | while read -r p; do
            if [ -d "$p" ]; then
              find "$p" -maxdepth 1 -type f -not -name "README.md" -not -name "Design.md" -not -name ".agent.md" -not -name "plan.txt" -not -name "Progress.txt" | sort | while read -r file; do
                if file -b --mime-type "$file" | grep -q "text"; then
                  file_dir=$(dirname "$file"); [ "$file_dir" != "$current_dir" ] && current_dir="$file_dir" && echo "### Folder: \`$current_dir\`" >> $OUTPUT_FILE
                  echo "#### File: \`$file\`" >> $OUTPUT_FILE; echo '```' >> $OUTPUT_FILE; cat "$file" >> $OUTPUT_FILE; echo '```' >> $OUTPUT_FILE;
                fi
              done; fi; done
          cd ..

      - name: 4. Generate Documentation for Claude Code Router
        run: |
          cd temp_claude
          OUTPUT_FILE="../claude_code_router_documentation.md"
          
          echo "# Project Documentation: Claude Code Router" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE
          
          if [ -f "README.md" ]; then
            echo "## 1. README" >> $OUTPUT_FILE && cat README.md >> $OUTPUT_FILE
          fi
          if [ -f "Design.md" ]; then
            echo "## 2. Design Document" >> $OUTPUT_FILE && cat Design.md >> $OUTPUT_FILE
          fi

          echo "## 3. Project File Tree" >> $OUTPUT_FILE
          echo '```' >> $OUTPUT_FILE
          tree -I ".git|.github|.agent.md|plan.txt|Progress.txt" >> $OUTPUT_FILE
          echo '```' >> $OUTPUT_FILE
          
          echo "## 4. Source Files" >> $OUTPUT_FILE
          current_dir=""
          find . -type d -name ".git" -prune -o -type d -name ".github" -prune -o -print | sort | while read -r p; do
            if [ -d "$p" ]; then
              find "$p" -maxdepth 1 -type f -not -name "README.md" -not -name "Design.md" -not -name ".agent.md" -not -name "plan.txt" -not -name "Progress.txt" | sort | while read -r file; do
                if file -b --mime-type "$file" | grep -q "text"; then
                  file_dir=$(dirname "$file"); [ "$file_dir" != "$current_dir" ] && current_dir="$file_dir" && echo "### Folder: \`$current_dir\`" >> $OUTPUT_FILE
                  echo "#### File: \`$file\`" >> $OUTPUT_FILE; echo '```' >> $OUTPUT_FILE; cat "$file" >> $OUTPUT_FILE; echo '```' >> $OUTPUT_FILE;
                fi
              done; fi; done
          cd ..

      - name: 5. DELETE EVERYTHING except the new documentation files
        run: |
          echo "Performing final cleanup. Only documentation files will remain."
          find . -mindepth 1 \
            ! -path './.git*' \
            ! -path './.github*' \
            ! -path './opencode_documentation.md' \
            ! -path './claude_code_router_documentation.md' \
            -exec rm -rf {} +
          echo "Cleanup complete."
          ls -la

      - name: 6. Commit the final documentation
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "docs: Generate and replace repository with project documentation"
            git push
          else
            echo "No changes detected to commit."
          fi
