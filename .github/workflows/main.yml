name: Process and Document Zip Archives
on:
  workflow_dispatch:
    inputs:
      zip_files_path:
        description: 'Path to the directory containing the zip files. Defaults to the repository root.'
        required: false
        type: string
        default: '.'
      zip_files:
        description: 'Zip files to process (e.g., file1.zip file2.zip). Path is relative to "zip_files_path".'
        required: true
        type: string
      output_path:
        description: 'Directory for final output. Defaults to root. Will be created if it does not exist.'
        required: false
        type: string
        default: '.'
      overwrite_repository:
        description: 'If true, delete all other files and replace the repo with the generated docs. Ignored if "Just Extract" is enabled.'
        required: true
        type: boolean
        default: false
      just_extract:
        description: 'If true, only extract the zip files to the specified output path and skip documentation.'
        required: false
        type: boolean
        default: false

jobs:
  build-and-document:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y tree unzip rsync grep

      - name: Clean Repository (if overwrite_repository is true and not just_extracting)
        if: ${{ github.event.inputs.overwrite_repository == 'true' && github.event.inputs.just_extract == 'false' }}
        run: |
          find . -mindepth 1 ! -path './.git*' ! -path './.github*' -exec rm -rf {} +

      - name: Clean Repository for Extraction (if just_extract is true and overwrite_repository is true)
        if: ${{ github.event.inputs.just_extract == 'true' && github.event.inputs.overwrite_repository == 'true' }}
        run: |
          find . -mindepth 1 ! -path './.git*' ! -path './.github*' -exec rm -rf {} +

      - name: Just Extract Zip Archives
        if: ${{ github.event.inputs.just_extract == 'true' }}
        run: |
          output_dir="${{ github.event.inputs.output_path }}"
          zip_dir="${{ github.event.inputs.zip_files_path }}"
          mkdir -p "$output_dir"
          
          declare -a zip_files_array=()
          while IFS= read -r -d $'\0' file; do
            zip_files_array+=("$file")
          done < <(printf '%s\0' "${{ github.event.inputs.zip_files }}" | xargs -0 -n 1 printf '%s\0')
          
          for zip_file in "${zip_files_array[@]}"; do
            if [ -z "$zip_file" ]; then continue; fi
            full_zip_path="$zip_dir/$zip_file"
            
            if [ ! -f "$full_zip_path" ]; then
              echo "⚠️ Warning: Skipping '$full_zip_path' because it was not found."
              continue
            fi

            unzip -o "$full_zip_path" -d "$output_dir"
            
            basename_no_ext="$(basename "$zip_file" .zip)"
            unzipped_subfolder="$output_dir/$basename_no_ext"
            if [ -d "$unzipped_subfolder" ]; then
              rsync -a "$unzipped_subfolder/" "$output_dir/"
              rm -rf "$unzipped_subfolder"
            fi
          done

      - name: Process and Generate Documentation Files
        if: ${{ github.event.inputs.just_extract == 'false' }}
        run: |
          output_dir="${{ github.event.inputs.output_path }}"
          zip_dir="${{ github.event.inputs.zip_files_path }}"
          mkdir -p "$output_dir"
          
          declare -a zip_files_array=()
          while IFS= read -r -d $'\0' file; do
            zip_files_array+=("$file")
          done < <(printf '%s\0' "${{ github.event.inputs.zip_files }}" | xargs -0 -n 1 printf '%s\0')
          
          for zip_file in "${zip_files_array[@]}"; do
            if [ -z "$zip_file" ]; then continue; fi
            full_zip_path="$zip_dir/$zip_file"

            if [ ! -f "$full_zip_path" ]; then
              echo "⚠️ Warning: Skipping '$full_zip_path' because it was not found."
              continue
            fi
            
            basename="${zip_file%.zip}"
            temp_dir="temp_${basename}"
            output_file="${output_dir}/${basename}_documentation.md"
            
            mkdir -p "$temp_dir"
            unzip -o "$full_zip_path" -d "$temp_dir"
            
            unzipped_subfolder="${temp_dir}/${basename}"
            if [ -d "$unzipped_subfolder" ]; then
              rsync -a "$unzipped_subfolder/" "$temp_dir/"
              rm -rf "$unzipped_subfolder"
            fi
            
            echo "# Project Documentation: ${basename}" > "$output_file"
            [ -f "${temp_dir}/README.md" ] && { echo "## 1. README" >> "$output_file"; echo '```markdown' >> "$output_file"; cat "${temp_dir}/README.md" >> "$output_file"; echo '```' >> "$output_file"; }
            [ -f "${temp_dir}/Design.md" ] && { echo "## 2. Design Document" >> "$output_file"; echo '```markdown' >> "$output_file"; cat "${temp_dir}/Design.md" >> "$output_file"; echo '```' >> "$output_file"; }

            echo "## 3. Project File Tree" >> "$output_file"; echo '```' >> "$output_file"
            tree "$temp_dir" -I ".git|.github|.agent.md|plan.txt|Progress.txt" >> "$output_file"
            echo '```' >> "$output_file"
            
            echo "## 4. Source Files" >> "$output_file"
            current_dir=""
            
            find "$temp_dir" -type f -not -path '*/.git/*' \
              -not -name "README.md" -not -name "Design.md" \
              -not -name ".agent.md" -not -name "plan.txt" -not -name "Progress.txt" \
              -print0 | sort -z | while IFS= read -r -d $'\0' file; do
                if grep -qI . "$file"; then
                  file_dir=$(dirname "$file")
                  if [ "$file_dir" != "$current_dir" ]; then
                    current_dir="$file_dir"
                    echo "### Folder: \`$current_dir\`" >> "$output_file"
                  fi
                  echo "#### File: \`$file\`" >> "$output_file"; echo '```' >> "$output_file"; cat "$file" >> "$output_file"; echo "" >> "$output_file"; echo '```' >> "$output_file"
                else
                  echo "Skipping binary file: $file"
                fi
              done
            
            rm -rf "$temp_dir"
          done

      - name: Commit Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if [ -n "$(git status --porcelain)" ]; then
            if [ "${{ github.event.inputs.just_extract }}" == "true" ]; then
              git commit -m "feat: Extracted zip files from workflow run"
            elif [ "${{ github.event.inputs.overwrite_repository }}" == "true" ]; then
              git commit -m "docs: Replaced repository with new documentation from workflow run"
            else
              git commit -m "docs: Created/updated project documentation from workflow run"
            fi
            git push
          else
            echo "No changes detected, nothing to commit."
          fi
