name: Process and Document Zip Archives
on:
  workflow_dispatch:
    inputs:
      zip_files:
        description: 'Zip files to process (space-separated)'
        required: true
        type: string
        default: 'opencode-main.zip claude-code-router-main.zip'
      overwrite_repository:
        description: 'If true, delete all other files and replace the repo with the generated docs.'
        required: true
        type: boolean
        default: true

jobs:
  build-and-document:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: 1. Install necessary utilities
        run: sudo apt-get update && sudo apt-get install -y tree

      - name: 2. Process each specified zip file
        run: |
          mkdir -p final_docs
          for zip_file in ${{ github.event.inputs.zip_files }}; do
            if [ ! -f "$zip_file" ]; then
              echo "⚠️ Warning: Skipping '$zip_file' because it was not found."
              continue
            fi
            
            echo "--- Processing: $zip_file ---"
            basename="${zip_file%.zip}"
            temp_dir="temp_${basename}"
            output_file="final_docs/${basename}_documentation.md"
            
            mkdir -p "$temp_dir"
            unzip -o "$zip_file" -d "$temp_dir"
            rsync -a "${temp_dir}/${basename}/" "$temp_dir/"
            rm -rf "${temp_dir}/${basename}"
            
            echo "# Project Documentation: ${basename}" > "$output_file"
            [ -f "${temp_dir}/README.md" ] && { echo "## 1. README" >> "$output_file"; echo '```' >> "$output_file"; cat "${temp_dir}/README.md" >> "$output_file"; echo '```' >> "$output_file"; }
            [ -f "${temp_dir}/Design.md" ] && { echo "## 2. Design Document" >> "$output_file"; echo '```' >> "$output_file"; cat "${temp_dir}/Design.md" >> "$output_file"; echo '```' >> "$output_file"; }

            echo "## 3. Project File Tree" >> "$output_file"; echo '```' >> "$output_file"
            tree "$temp_dir" -I ".git|.github|.agent.md|plan.txt|Progress.txt" >> "$output_file"
            echo '```' >> "$output_file"
            
            echo "## 4. Source Files" >> "$output_file"
            current_dir=""
            find "$temp_dir" -type d -name ".git" -prune -o -type d -name ".github" -prune -o -print | sort | while read -r p; do
              if [ -d "$p" ]; then
                find "$p" -maxdepth 1 -type f -not -name "README.md" -not -name "Design.md" -not -name ".agent.md" -not -name "plan.txt" -not -name "Progress.txt" | sort | while read -r file; do
                  if file -b --mime-type "$file" | grep -q "text"; then
                    file_dir=$(dirname "$file"); [ "$file_dir" != "$current_dir" ] && current_dir="$file_dir" && echo "### Folder: \`$current_dir\`" >> "$output_file"
                    echo "#### File: \`$file\`" >> "$output_file"; echo '```' >> "$output_file"; cat "$file" >> "$output_file"; echo "" >> $output_file; echo '```' >> "$output_file"
                  fi
                done; fi; done
            rm -rf "$temp_dir"
          done

      - name: 3. Move Generated Documentation to Root
        run: |
          if [ -d "final_docs" ] && [ "$(ls -A final_docs)" ]; then
            mv final_docs/* .
          fi
          rm -rf final_docs

      - name: 4. Clean Repository (if overwrite is enabled)
        if: github.event.inputs.overwrite_repository == true
        run: |
          echo "Overwrite is enabled. Deleting all non-documentation files..."
          find . -mindepth 1 ! -path './.git*' ! -path './.github*' ! -name '*_documentation.md' -exec rm -rf {} +
          echo "Cleanup complete."

      - name: 5. Commit Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # This intelligently adds all new and modified doc files, and stages deletions if overwrite was true
          git add .
          
          if [ -n "$(git status --porcelain)" ]; then
            # Customize commit message based on the overwrite action
            if [ "${{ github.event.inputs.overwrite_repository }}" == "true" ]; then
              git commit -m "docs: Replace repository with new documentation"
            else
              git commit -m "docs: Create/update project documentation"
            fi
            git push
          else
            echo "No changes detected, nothing to commit."
          fi
