name: TerraAWG Multi-World Generator
on:
  workflow_dispatch:
    inputs:
      perfect_seed_mode:
        description: 'Enable "Perfect Seed" mode? (Ignores run_count and seeds)'
        required: true
        type: boolean
        default: false
      base_seed:
        description: 'The 9-digit base seed for "Perfect Seed" mode.'
        required: false
        type: string
        default: '631104298'
      run_count:
        description: '(Manual Mode) How many worlds to generate?'
        required: false
        type: number
        default: 1
      seeds:
        description: '(Manual Mode) Comma-separated list of seeds (e.g., "RANDOM,12345,54321").'
        required: false
        type: string
        default: 'RANDOM'
      timeouts:
        description: 'Timeout in minutes for each run (e.g., "30" or "30,20,40").'
        required: true
        type: string
        default: '30'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix_config: ${{ steps.generate_matrix.outputs.matrix_config }}
    steps:
      - name: Generate Matrix Configuration
        id: generate_matrix
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.perfect_seed_mode }}" == "true" ]]; then
            echo "--- Perfect Seed Mode Activated ---"
            BASE_SEED="${{ github.event.inputs.base_seed }}"
            if [[ ! $BASE_SEED =~ ^[0-9]{9}$ ]]; then
              echo "::error::Base seed must be exactly 9 digits for Perfect Seed mode."
              exit 1
            fi
            
            JSON_ARRAY="[]"
            RUN_COUNTER=1
            for (( i=0; i<9; i++ )); do
              original_digit=${BASE_SEED:$i:1}
              for j in {0..9}; do
                if [[ "$j" -ne "$original_digit" ]]; then
                  prefix=${BASE_SEED:0:$i}
                  suffix=${BASE_SEED:$i+1}
                  new_seed="${prefix}${j}${suffix}"
                  
                  JSON_OBJECT=$(jq -n --arg rn "$RUN_COUNTER" --arg s "$new_seed" '{run_number: $rn, seed: $s}')
                  JSON_ARRAY=$(echo "$JSON_ARRAY" | jq --argjson obj "$JSON_OBJECT" '. + [$obj]')
                  RUN_COUNTER=$((RUN_COUNTER + 1))
                fi
              done
            done
            echo "Generated 81 seed permutations."

          else
            echo "--- Manual Mode Activated ---"
            JSON_ARRAY="[]"
            RUN_COUNT=${{ github.event.inputs.run_count }}
            IFS=',' read -r -a seed_array <<< "${{ github.event.inputs.seeds }}"
            
            for (( i=1; i<=$RUN_COUNT; i++ )); do
              index=$((i - 1))
              if [[ $index -ge ${#seed_array[@]} ]]; then
                current_seed=${seed_array[-1]}
              else
                current_seed=${seed_array[$index]}
              fi

              JSON_OBJECT=$(jq -n --arg rn "$i" --arg s "$current_seed" '{run_number: $rn, seed: $s}')
              JSON_ARRAY=$(echo "$JSON_ARRAY" | jq --argjson obj "$JSON_OBJECT" '. + [$obj]')
            done
            echo "Generated $RUN_COUNT manual runs."
          fi

          echo "matrix_config=$(echo $JSON_ARRAY | jq -c .)" >> $GITHUB_OUTPUT

  generate-worlds:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        run: ${{ fromJson(needs.setup.outputs.matrix_config) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Make TerraAWG executable
        run: chmod +x Terra/terra-awg

      - name: Configure Seed for Run ${{ matrix.run.run_number }}
        run: |
          echo "Setting seed to ${{ matrix.run.seed }} for this run."
          sed -i 's/^seed = .*/seed = ${{ matrix.run.seed }}/' Terra/terra-awg.ini
          echo "--- Current terra-awg.ini ---"
          cat Terra/terra-awg.ini
          echo "-----------------------------"

      - name: Run World Generator (Run ${{ matrix.run.run_number }})
        shell: bash
        run: |
          IFS=',' read -r -a timeout_array <<< "${{ github.event.inputs.timeouts }}"
          index=$((${{ matrix.run.run_number }} - 1))
          
          if [[ $index -ge ${#timeout_array[@]} ]]; then
            timeout_value=${timeout_array[-1]}
          else
            timeout_value=${timeout_array[$index]}
          fi
          
          echo "Using a timeout of ${timeout_value} minutes for this run."

          # THIS IS THE CHANGED LINE
          if timeout ${timeout_value}m bash -c 'cd Terra && stdbuf -oL ./terra-awg'; then
            echo "World generator succeeded."
          else
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "::error::Run #${{ matrix.run.run_number }} failed: Timed out after ${timeout_value} minutes."
            else
              echo "::error::Run #${{ matrix.run.run_number }} failed with error code $exit_code."
            fi
            exit 1
          fi

          world_file=$(find Terra -maxdepth 1 -name "*.wld" -print -quit)
          if [[ -z "$world_file" ]]; then
            echo "::error::Could not find a generated .wld file."
            exit 1
          fi
          world_name=$(basename "$world_file" .wld)
          folder_name="${{ matrix.run.run_number }}_${world_name}"
          
          echo "Creating directory: ${folder_name}"
          mkdir -p "${folder_name}"
          
          mv Terra/*.wld "${folder_name}/"
          mv Terra/*.png "${folder_name}/"
      
      - name: Upload Temporary Artifact for Run ${{ matrix.run.run_number }}
        uses: actions/upload-artifact@v4
        with:
          name: run-output-${{ matrix.run.run_number }}
          path: "${{ matrix.run.run_number }}_*"
          if-no-files-found: error

  combine-and-upload:
    needs: generate-worlds
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create Final Output Directory
        run: mkdir -p final_artifact
      
      - name: Download All Run Artifacts
        uses: actions/download-artifact@v4
        with:
          path: final_artifact
      
      - name: List Downloaded Files for Verification
        run: ls -R final_artifact

      - name: Upload Single Combined Artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-worlds-archive
          path: final_artifact/
          if-no-files-found: error
