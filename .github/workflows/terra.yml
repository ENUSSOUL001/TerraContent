name: TerraAWG Runner (Ubuntu)
on:
  workflow_dispatch:
    inputs:
      json_config:
        description: 'A JSON string containing all world generation options.'
        required: true
        type: string

jobs:
  generate-world:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Make TerraAWG executable
        run: chmod +x Terra/terra-awg

      - name: Generate INI from JSON
        id: generate_ini
        shell: bash
        run: |
          echo "--- Validating JSON input ---"
          JSON_DATA='${{ github.event.inputs.json_config }}'
          if [[ -z "$JSON_DATA" ]]; then
            echo "Error: json_config input is empty."
            exit 1
          fi
          echo "JSON is not empty. Proceeding."

          INI_FILE="Terra/terra-awg.ini"

          echo "--- Generating terra-awg.ini ---"
          cat <<EOF > $INI_FILE
          [world]
          name = $(echo "$JSON_DATA" | jq -r .name)
          seed = $(echo "$JSON_DATA" | jq -r .seed)
          width = $(echo "$JSON_DATA" | jq -r .width)
          height = $(echo "$JSON_DATA" | jq -r .height)
          mode = $(echo "$JSON_DATA" | jq -r .mode)
          evil = $(echo "$JSON_DATA" | jq -r .evil)
          home = $(echo "$JSON_DATA" | jq -r .home)

          [variation]
          equipment = $(echo "$JSON_DATA" | jq -r .equipment)
          spawn = $(echo "$JSON_DATA" | jq -r .spawn)
          unpainted = $(echo "$JSON_DATA" | jq -r .unpainted)
          fadedMemories = $(echo "$JSON_DATA" | jq -r .fadedMemories)
          doubleTrouble = $(echo "$JSON_DATA" | jq -r .doubleTrouble)
          shattered = $(echo "$JSON_DATA" | jq -r .shattered)
          sunken = $(echo "$JSON_DATA" | jq -r .sunken)
          purity = $(echo "$JSON_DATA" | jq -r .purity)
          hardmode = $(echo "$JSON_DATA" | jq -r .hardmode)
          hardmodeLoot = $(echo "$JSON_DATA" | jq -r .hardmodeLoot)
          biomes = $(echo "$JSON_DATA" | jq -r .biomes)
          patchesHumidity = $(echo "$JSON_DATA" | jq -r .patchesHumidity)
          patchesTemperature = $(echo "$JSON_DATA" | jq -r .patchesTemperature)
          patchesSize = $(echo "$JSON_DATA" | jq -r .patchesSize)
          celebration = $(echo "$JSON_DATA" | jq -r .celebration)
          hiveQueen = $(echo "$JSON_DATA" | jq -r .hiveQueen)
          forTheWorthy = $(echo "$JSON_DATA" | jq -r .forTheWorthy)
          meteorites = $(echo "$JSON_DATA" | jq -r .meteorites)
          meteoriteSize = $(echo "$JSON_DATA" | jq -r .meteoriteSize)
          ore = $(echo "$JSON_DATA" | jq -r .ore)
          lifeCrystals = $(echo "$JSON_DATA" | jq -r .lifeCrystals)
          manaCrystals = $(echo "$JSON_DATA" | jq -r .manaCrystals)
          pots = $(echo "$JSON_DATA" | jq -r .pots)
          chests = $(echo "$JSON_DATA" | jq -r .chests)
          gems = $(echo "$JSON_DATA" | jq -r .gems)
          traps = $(echo "$JSON_DATA" | jq -r .traps)
          trees = $(echo "$JSON_DATA" | jq -r .trees)
          livingTrees = $(echo "$JSON_DATA" | jq -r .livingTrees)
          clouds = $(echo "$JSON_DATA" | jq -r .clouds)
          asteroids = $(echo "$JSON_DATA" | jq -r .asteroids)
          minecartTracks = $(echo "$JSON_DATA" | jq -r .minecartTracks)
          minecartLength = $(echo "$JSON_DATA" | jq -r .minecartLength)
          aetherSize = $(echo "$JSON_DATA" | jq -r .aetherSize)
          dungeonSize = $(echo "$JSON_DATA" | jq -r .dungeonSize)
          templeSize = $(echo "$JSON_DATA" | jq -r .templeSize)
          evilSize = $(echo "$JSON_DATA" | jq -r .evilSize)
          oceanSize = $(echo "$JSON_DATA" | jq -r .oceanSize)
          oceanCaveSize = $(echo "$JSON_DATA" | jq -r .oceanCaveSize)
          marbleFreq = $(echo "$JSON_DATA" | jq -r .marbleFreq)
          marbleSize = $(echo "$JSON_DATA" | jq -r .marbleSize)
          graniteFreq = $(echo "$JSON_DATA" | jq -r .graniteFreq)
          graniteSize = $(echo "$JSON_DATA" | jq -r .graniteSize)
          glowingMushroomFreq = $(echo "$JSON_DATA" | jq -r .glowingMushroomFreq)
          glowingMushroomSize = $(echo "$JSON_DATA" | jq -r .glowingMushroomSize)
          hiveFreq = $(echo "$JSON_DATA" | jq -r .hiveFreq)
          hiveSize = $(echo "$JSON_DATA" | jq -r .hiveSize)
          spiderNestFreq = $(echo "$JSON_DATA" | jq -r .spiderNestFreq)
          spiderNestSize = $(echo "$JSON_DATA" | jq -r .spiderNestSize)
          glowingMossFreq = $(echo "$JSON_DATA" | jq -r .glowingMossFreq)
          glowingMossSize = $(echo "$JSON_DATA" | jq -r .glowingMossSize)
          snowSize = $(echo "$JSON_DATA" | jq -r .snowSize)
          desertSize = $(echo "$JSON_DATA" | jq -r .desertSize)
          jungleSize = $(echo "$JSON_DATA" | jq -r .jungleSize)
          surfaceAmplitude = $(echo "$JSON_DATA" | jq -r .surfaceAmplitude)

          [extra]
          map = $(echo "$JSON_DATA" | jq -r .map)
          EOF
          
          echo "--- Generated terra-awg.ini ---"
          cat $INI_FILE
          echo "-------------------------------"

      - name: Run World Generator
        id: run_generator
        shell: bash
        run: |
          max_attempts=14
          for ((attempt=1; attempt<=max_attempts; attempt++)); do
            echo "Running world generator, attempt $attempt of $max_attempts (30 minute timeout)..."
            if timeout 30m bash -c 'cd Terra && ./terra-awg'; then
              echo "World generator succeeded on attempt $attempt."
              exit 0 
            fi
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "Attempt $attempt failed: Timed out after 30 minutes."
            else
              echo "Attempt $attempt failed with a different error (exit code $exit_code)."
            fi
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 20 seconds before the next attempt..."
              sleep 20
            fi
          done
          echo "All $max_attempts attempts have failed."
          exit 1

      - name: Upload Success Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: generated-world-files
          path: |
            Terra/*.wld
            Terra/*.png
          if-no-files-found: error

      - name: Handle Generation Failure
        if: failure()
        run: echo "The world generator failed after all 14 attempts. Check the 'Run World Generator' step logs for details." > "generator-failure-log.txt"

      - name: Upload Failure Artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: generator-failed
          path: generator-failure-log.txt
